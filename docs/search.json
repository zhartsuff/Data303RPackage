[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 newprojdata303 authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/altair_linegraph.html","id":"r-markdown","dir":"Articles","previous_headings":"","what":"R Markdown","title":"altair_linegraph","text":"","code":"import altair as alt import pandas as pd"},{"path":"/articles/altair_linegraph.html","id":"some-brief-data-tidying","dir":"Articles","previous_headings":"R Markdown","what":"Some brief data tidying","title":"altair_linegraph","text":"","code":"countries <- c(   \"Kenya\", \"Uganda\", \"Eritrea\",   \"Ethiopia\", \"Djibouti\", \"Somalia\",   \"Rwanda\", \"Tanzania\", \"Burundi\")  east_africa_pop <- gapminder |>   filter(country %in% countries) east_africa_pop #> # A tibble: 108 × 6 #>    country continent  year lifeExp     pop gdpPercap #>    <fct>   <fct>     <int>   <dbl>   <int>     <dbl> #>  1 Burundi Africa     1952    39.0 2445618      339. #>  2 Burundi Africa     1957    40.5 2667518      380. #>  3 Burundi Africa     1962    42.0 2961915      355. #>  4 Burundi Africa     1967    43.5 3330989      413. #>  5 Burundi Africa     1972    44.1 3529983      464. #>  6 Burundi Africa     1977    45.9 3834415      556. #>  7 Burundi Africa     1982    47.5 4580410      560. #>  8 Burundi Africa     1987    48.2 5126023      622. #>  9 Burundi Africa     1992    44.7 5809236      632. #> 10 Burundi Africa     1997    45.3 6121610      463. #> # ℹ 98 more rows"},{"path":"/articles/altair_linegraph.html","id":"altair-line-chart-features","dir":"Articles","previous_headings":"","what":"Altair Line Chart Features","title":"altair_linegraph","text":"Altair staistical graphics library Python. allows quickly create charts quickly concisely. One Altair’s visualization features line charts. Altair comes equipped many ways easily add features line chart just changing couple words code.","code":""},{"path":"/articles/altair_linegraph.html","id":"normal-line-chart","dir":"Articles","previous_headings":"Altair Line Chart Features","what":"Normal Line Chart","title":"altair_linegraph","text":"simple multiple series line chart (overlapping lines) compares population data several East African countries. data displayed census data country’s population beginning 1952 done every 5 years 2007. something can done easily without using Altair graphics packages, just many features Altair contains can transform line chart.","code":"east_africa_pop = r.east_africa_pop  alt.Chart(east_africa_pop).mark_line().encode(     x=alt.X(\"year\", axis=alt.Axis(title=\"Year\")),     y=alt.Y(\"pop\", axis=alt.Axis(title=\"Population\")),     color=\"country:N\" ).properties(     title=\"Population in East Africa over Time\" )"},{"path":"/articles/altair_linegraph.html","id":"smoothed-lines","dir":"Articles","previous_headings":"Altair Line Chart Features","what":"Smoothed Lines","title":"altair_linegraph","text":"Instead making sharp turns data point, line curved show trends neatly. necessary particular situation, instances data oscillates many times, can useful.","code":"alt.Chart(east_africa_pop).mark_line(interpolate=\"monotone\").encode(     x=alt.X(\"year\", axis=alt.Axis(title=\"Year\")),     y=alt.Y(\"pop\", axis=alt.Axis(title=\"Population\")),     color=\"country:N\" ).properties(     title=\"Populations of East Africa with Monotone Interpolation\" )"},{"path":"/articles/altair_linegraph.html","id":"step-chart","dir":"Articles","previous_headings":"Altair Line Chart Features","what":"Step Chart","title":"altair_linegraph","text":"step chart type line chart vertical horizontal jumps data points. graph data simply using step chart display data. step chart useful highlighting irregular jumps data. Since don’t appear data, isn’t super useful instance, cases helpful.","code":"alt.Chart(east_africa_pop).mark_line(interpolate=\"step-after\").encode(     x=alt.X(\"year\", axis=alt.Axis(title=\"Year\")),     y=alt.Y(\"pop\", axis=alt.Axis(title=\"Population\")),     color=\"country:N\" ).properties(     title=\"Populations of East Africa Step Chart\" )"},{"path":"/articles/altair_linegraph.html","id":"with-point-labels","dir":"Articles","previous_headings":"Altair Line Chart Features","what":"With Point Labels","title":"altair_linegraph","text":"looks similar original plot, data points labeled circles. helpful tool care plot , seeing precisely data point useful case.","code":"alt.Chart(east_africa_pop).mark_line(point=True).encode(     x=alt.X(\"year\", axis=alt.Axis(title=\"Year\")),     y=alt.Y(\"pop\", axis=alt.Axis(title=\"Population\")),     color=\"country:N\" ).properties(     title=\"Populations of East Africa with Point Labels\" )"},{"path":"/articles/df_apply.html","id":"description","dir":"Articles","previous_headings":"","what":"Description","title":"df_apply","text":"function takes data frame, function, filter. function can applied column data frame return column dataframe. filter return either true false.","code":""},{"path":"/articles/df_apply.html","id":"use","dir":"Articles","previous_headings":"","what":"Use","title":"df_apply","text":"df_apply(.data, .fun, .filter, …) team used df_apply round lengths widths iris petals using R preset iris data frame. (useful precision isn’t needed user wants round integers analysis.) use df_apply() round numbers, simply use premade function round() place .fun, .numeric() .filter data frame choice: iris_function <- df_apply(iris, round, .numeric) function can used data set, mutate function, filter function. filter function applied columns, one one, checking whether condition true. instance, change text data frame upper case, can use .character() function filter, apply toupper() function change columns characters upper case. df_apply() function returns updated data frame.","code":""},{"path":"/articles/df_apply.html","id":"general-requirements","dir":"Articles","previous_headings":"","what":"General requirements","title":"df_apply","text":"Pass df_apply function: data frame function can applied vector change function can take vector check whether condition true vector (instance, whether contains certain data type)","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Grace Van Farowe. Author. Zander Hartsuff. Author, maintainer. Gabby Freshly. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Van Farowe G, Hartsuff Z, Freshly G (2023). newprojdata303: package takes data frame applies function column condition met. R package version 0.0.0.9000.","code":"@Manual{,   title = {newprojdata303: This package takes a data frame and applies a function to each column where a condition is met},   author = {Grace {Van Farowe} and Zander Hartsuff and Gabby Freshly},   year = {2023},   note = {R package version 0.0.0.9000}, }"},{"path":[]},{"path":"/index.html","id":"created-by-grace-van-farowe-zander-hartsuff-and-gabby-freshly","dir":"","previous_headings":"","what":"Created by Grace Van Farowe, Zander Hartsuff, and Gabby Freshly","title":"This package takes a data frame and applies a function to each column where a condition is met","text":"https://zhartsuff.github.io/Data303RPackage package created Data 303 Calvin University. basic form, includes function called df_apply takes data frame, condition function mutator function. function applies mutator function vectors data frame condition true returns resulting data frame. also includes example data frames test use function . Extra arguments can passed function well. instance, round used, can pass “digits = 3” place “…”. function round numbers 3 decimal places.","code":""},{"path":"/index.html","id":"how-to-install","dir":"","previous_headings":"","what":"How to install","title":"This package takes a data frame and applies a function to each column where a condition is met","text":"Type following r console:","code":"# install.packages(\"devtools\") devtools::install_github(\"zhartsuff/Data303RPackage\")"},{"path":"/index.html","id":"implementation-of-the-df_apply-function","dir":"","previous_headings":"","what":"Implementation of the df_apply() function:","title":"This package takes a data frame and applies a function to each column where a condition is met","text":"","code":"df_apply <- function(.data, .fun, .filter, ...) {   if(!is.data.frame(.data)){     stop(\"You have entered a non data frame. Please try again\")   }   new_df <- lapply(.data, function(x) {     if (.filter(x)) {       .fun(x, ...)     }     data.frame(new_df)   })   return (new_df) }"},{"path":"/index.html","id":"use-cases","dir":"","previous_headings":"","what":"Use cases:","title":"This package takes a data frame and applies a function to each column where a condition is met","text":"df_apply(iris, round, .numeric, digits = 3) round numeric columns iris data frame three decimal places, returning new version rounded integers. df_apply(simple_df, toupper, .character) take data frame created testing purposes (included package) return data frame character columns changed upper case.","code":""},{"path":"/index.html","id":"data-sets","dir":"","previous_headings":"","what":"Data sets:","title":"This package takes a data frame and applies a function to each column where a condition is met","text":"package includes boloria, data frame butterflies, iris_rounded, mutated version base r iris data set testing purposes, simple_df, original data set created authors package test df_apply, simple_upper, version simple_df upper case letters. Try help(boloria) etc. information data sets package. See vignette test cases general information df_apply function.","code":""},{"path":[]},{"path":"/reference/boloria.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Climate conditions of the boloria chariclea butterfly — boloria","text":"data frame 5 rows 5 columns year Data collected 1996 - 2013 site Seven sites measurements taken sex sex butterfly WL Wing length DOY Day year Snow Snowfall year inches mayjun Diffence wing length May June https://datadryad.org/stash/dataset/doi:10.5061/dryad.43gt3   boloria   Data study wing lengths butterflies  datasets","code":""},{"path":"/reference/dd_rounded1.html","id":null,"dir":"Reference","previous_headings":"","what":"dd_rounded1 — dd_rounded1","title":"dd_rounded1 — dd_rounded1","text":"version decimal_data numeric columns mean greater 10 rounded nearest 10. testing df_apply .","code":""},{"path":"/reference/dd_rounded1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dd_rounded1 — dd_rounded1","text":"","code":"dd_rounded1"},{"path":"/reference/dd_rounded1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"dd_rounded1 — dd_rounded1","text":"data frame 6 rows 5 columns: medium Medium sized numbers decimals, rounded words characters; rounding apply big large numbers, rounded nearest 10 mixed large small numbers, rounded nearest 10 small small numbers, rounded","code":""},{"path":"/reference/dd_rounded2.html","id":null,"dir":"Reference","previous_headings":"","what":"dd_rounded2 — dd_rounded2","title":"dd_rounded2 — dd_rounded2","text":"version decimal_data numeric columns rounded 3 deimal places.","code":""},{"path":"/reference/dd_rounded2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dd_rounded2 — dd_rounded2","text":"","code":"dd_rounded2"},{"path":"/reference/dd_rounded2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"dd_rounded2 — dd_rounded2","text":"data frame 6 rows 5 columns: medium Medium sized numbers decimals, rounded words characters; rounding apply big large numbers, decimals rounding anything mixed large small numbers, rounded small small numbers, rounded","code":""},{"path":"/reference/decimal_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Decimal data — decimal_data","title":"Decimal data — decimal_data","text":"testing data numbers varying lengths","code":""},{"path":"/reference/decimal_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decimal data — decimal_data","text":"","code":"decimal_data"},{"path":"/reference/decimal_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Decimal data — decimal_data","text":"data frame 6 rows 5 columns: medium Medium sized numbers decimals words characters; rounding apply big large numbers mixed large small numbers small small numbers","code":""},{"path":"/reference/df_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function to rows in the data frame for which a condition is true — df_apply","title":"Apply a function to rows in the data frame for which a condition is true — df_apply","text":"Apply function rows data frame condition true","code":""},{"path":"/reference/df_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function to rows in the data frame for which a condition is true — df_apply","text":"","code":"df_apply(.data, .fun, .filter, ...)"},{"path":"/reference/df_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function to rows in the data frame for which a condition is true — df_apply","text":".data data frame. .fun function takes vector returns changes. .filter function takes vector returns bool letting df_apply know whether apply .fun","code":""},{"path":"/reference/df_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function to rows in the data frame for which a condition is true — df_apply","text":"new_df, updated data frame columns .filter returns true changed .fun","code":""},{"path":"/reference/df_apply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function to rows in the data frame for which a condition is true — df_apply","text":"","code":"df_apply(iris, round, is.numeric, digits = 4) #>     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species #> 1            5.1         3.5          1.4         0.2     setosa #> 2            4.9         3.0          1.4         0.2     setosa #> 3            4.7         3.2          1.3         0.2     setosa #> 4            4.6         3.1          1.5         0.2     setosa #> 5            5.0         3.6          1.4         0.2     setosa #> 6            5.4         3.9          1.7         0.4     setosa #> 7            4.6         3.4          1.4         0.3     setosa #> 8            5.0         3.4          1.5         0.2     setosa #> 9            4.4         2.9          1.4         0.2     setosa #> 10           4.9         3.1          1.5         0.1     setosa #> 11           5.4         3.7          1.5         0.2     setosa #> 12           4.8         3.4          1.6         0.2     setosa #> 13           4.8         3.0          1.4         0.1     setosa #> 14           4.3         3.0          1.1         0.1     setosa #> 15           5.8         4.0          1.2         0.2     setosa #> 16           5.7         4.4          1.5         0.4     setosa #> 17           5.4         3.9          1.3         0.4     setosa #> 18           5.1         3.5          1.4         0.3     setosa #> 19           5.7         3.8          1.7         0.3     setosa #> 20           5.1         3.8          1.5         0.3     setosa #> 21           5.4         3.4          1.7         0.2     setosa #> 22           5.1         3.7          1.5         0.4     setosa #> 23           4.6         3.6          1.0         0.2     setosa #> 24           5.1         3.3          1.7         0.5     setosa #> 25           4.8         3.4          1.9         0.2     setosa #> 26           5.0         3.0          1.6         0.2     setosa #> 27           5.0         3.4          1.6         0.4     setosa #> 28           5.2         3.5          1.5         0.2     setosa #> 29           5.2         3.4          1.4         0.2     setosa #> 30           4.7         3.2          1.6         0.2     setosa #> 31           4.8         3.1          1.6         0.2     setosa #> 32           5.4         3.4          1.5         0.4     setosa #> 33           5.2         4.1          1.5         0.1     setosa #> 34           5.5         4.2          1.4         0.2     setosa #> 35           4.9         3.1          1.5         0.2     setosa #> 36           5.0         3.2          1.2         0.2     setosa #> 37           5.5         3.5          1.3         0.2     setosa #> 38           4.9         3.6          1.4         0.1     setosa #> 39           4.4         3.0          1.3         0.2     setosa #> 40           5.1         3.4          1.5         0.2     setosa #> 41           5.0         3.5          1.3         0.3     setosa #> 42           4.5         2.3          1.3         0.3     setosa #> 43           4.4         3.2          1.3         0.2     setosa #> 44           5.0         3.5          1.6         0.6     setosa #> 45           5.1         3.8          1.9         0.4     setosa #> 46           4.8         3.0          1.4         0.3     setosa #> 47           5.1         3.8          1.6         0.2     setosa #> 48           4.6         3.2          1.4         0.2     setosa #> 49           5.3         3.7          1.5         0.2     setosa #> 50           5.0         3.3          1.4         0.2     setosa #> 51           7.0         3.2          4.7         1.4 versicolor #> 52           6.4         3.2          4.5         1.5 versicolor #> 53           6.9         3.1          4.9         1.5 versicolor #> 54           5.5         2.3          4.0         1.3 versicolor #> 55           6.5         2.8          4.6         1.5 versicolor #> 56           5.7         2.8          4.5         1.3 versicolor #> 57           6.3         3.3          4.7         1.6 versicolor #> 58           4.9         2.4          3.3         1.0 versicolor #> 59           6.6         2.9          4.6         1.3 versicolor #> 60           5.2         2.7          3.9         1.4 versicolor #> 61           5.0         2.0          3.5         1.0 versicolor #> 62           5.9         3.0          4.2         1.5 versicolor #> 63           6.0         2.2          4.0         1.0 versicolor #> 64           6.1         2.9          4.7         1.4 versicolor #> 65           5.6         2.9          3.6         1.3 versicolor #> 66           6.7         3.1          4.4         1.4 versicolor #> 67           5.6         3.0          4.5         1.5 versicolor #> 68           5.8         2.7          4.1         1.0 versicolor #> 69           6.2         2.2          4.5         1.5 versicolor #> 70           5.6         2.5          3.9         1.1 versicolor #> 71           5.9         3.2          4.8         1.8 versicolor #> 72           6.1         2.8          4.0         1.3 versicolor #> 73           6.3         2.5          4.9         1.5 versicolor #> 74           6.1         2.8          4.7         1.2 versicolor #> 75           6.4         2.9          4.3         1.3 versicolor #> 76           6.6         3.0          4.4         1.4 versicolor #> 77           6.8         2.8          4.8         1.4 versicolor #> 78           6.7         3.0          5.0         1.7 versicolor #> 79           6.0         2.9          4.5         1.5 versicolor #> 80           5.7         2.6          3.5         1.0 versicolor #> 81           5.5         2.4          3.8         1.1 versicolor #> 82           5.5         2.4          3.7         1.0 versicolor #> 83           5.8         2.7          3.9         1.2 versicolor #> 84           6.0         2.7          5.1         1.6 versicolor #> 85           5.4         3.0          4.5         1.5 versicolor #> 86           6.0         3.4          4.5         1.6 versicolor #> 87           6.7         3.1          4.7         1.5 versicolor #> 88           6.3         2.3          4.4         1.3 versicolor #> 89           5.6         3.0          4.1         1.3 versicolor #> 90           5.5         2.5          4.0         1.3 versicolor #> 91           5.5         2.6          4.4         1.2 versicolor #> 92           6.1         3.0          4.6         1.4 versicolor #> 93           5.8         2.6          4.0         1.2 versicolor #> 94           5.0         2.3          3.3         1.0 versicolor #> 95           5.6         2.7          4.2         1.3 versicolor #> 96           5.7         3.0          4.2         1.2 versicolor #> 97           5.7         2.9          4.2         1.3 versicolor #> 98           6.2         2.9          4.3         1.3 versicolor #> 99           5.1         2.5          3.0         1.1 versicolor #> 100          5.7         2.8          4.1         1.3 versicolor #> 101          6.3         3.3          6.0         2.5  virginica #> 102          5.8         2.7          5.1         1.9  virginica #> 103          7.1         3.0          5.9         2.1  virginica #> 104          6.3         2.9          5.6         1.8  virginica #> 105          6.5         3.0          5.8         2.2  virginica #> 106          7.6         3.0          6.6         2.1  virginica #> 107          4.9         2.5          4.5         1.7  virginica #> 108          7.3         2.9          6.3         1.8  virginica #> 109          6.7         2.5          5.8         1.8  virginica #> 110          7.2         3.6          6.1         2.5  virginica #> 111          6.5         3.2          5.1         2.0  virginica #> 112          6.4         2.7          5.3         1.9  virginica #> 113          6.8         3.0          5.5         2.1  virginica #> 114          5.7         2.5          5.0         2.0  virginica #> 115          5.8         2.8          5.1         2.4  virginica #> 116          6.4         3.2          5.3         2.3  virginica #> 117          6.5         3.0          5.5         1.8  virginica #> 118          7.7         3.8          6.7         2.2  virginica #> 119          7.7         2.6          6.9         2.3  virginica #> 120          6.0         2.2          5.0         1.5  virginica #> 121          6.9         3.2          5.7         2.3  virginica #> 122          5.6         2.8          4.9         2.0  virginica #> 123          7.7         2.8          6.7         2.0  virginica #> 124          6.3         2.7          4.9         1.8  virginica #> 125          6.7         3.3          5.7         2.1  virginica #> 126          7.2         3.2          6.0         1.8  virginica #> 127          6.2         2.8          4.8         1.8  virginica #> 128          6.1         3.0          4.9         1.8  virginica #> 129          6.4         2.8          5.6         2.1  virginica #> 130          7.2         3.0          5.8         1.6  virginica #> 131          7.4         2.8          6.1         1.9  virginica #> 132          7.9         3.8          6.4         2.0  virginica #> 133          6.4         2.8          5.6         2.2  virginica #> 134          6.3         2.8          5.1         1.5  virginica #> 135          6.1         2.6          5.6         1.4  virginica #> 136          7.7         3.0          6.1         2.3  virginica #> 137          6.3         3.4          5.6         2.4  virginica #> 138          6.4         3.1          5.5         1.8  virginica #> 139          6.0         3.0          4.8         1.8  virginica #> 140          6.9         3.1          5.4         2.1  virginica #> 141          6.7         3.1          5.6         2.4  virginica #> 142          6.9         3.1          5.1         2.3  virginica #> 143          5.8         2.7          5.1         1.9  virginica #> 144          6.8         3.2          5.9         2.3  virginica #> 145          6.7         3.3          5.7         2.5  virginica #> 146          6.7         3.0          5.2         2.3  virginica #> 147          6.3         2.5          5.0         1.9  virginica #> 148          6.5         3.0          5.2         2.0  virginica #> 149          6.2         3.4          5.4         2.3  virginica #> 150          5.9         3.0          5.1         1.8  virginica df_apply(simple_df, toupper, is.character) #>   X1  X2         X3 X4       X5 #> 1  A THE     3.4758  4    GABBY #> 2  B CAT     4.2000  6   ZANDER #> 3  C  IN     5.3248 23    GRACE #> 4  D THE   435.5433 54 SOMEBODY #> 5  E HAT 10000.0000 12  RANDALL"},{"path":[]},{"path":"/reference/iris_rounded.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Iris data set rounded — iris_rounded","text":"iris_rounded data frame 150 cases (rows) 5 variables (columns) named Sepal.Length, Sepal.Width, Petal.Length, Petal.Width, Species. Use help(iris) see details data iris_rounded   Base R iris data set numeric columns rounded  datasets","code":""},{"path":"/reference/newprojdata303.df_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function to rows in the data frame for which a condition is true — newprojdata303.df_apply","title":"Apply a function to rows in the data frame for which a condition is true — newprojdata303.df_apply","text":"Apply function rows data frame condition true","code":""},{"path":"/reference/newprojdata303.df_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function to rows in the data frame for which a condition is true — newprojdata303.df_apply","text":"","code":"newprojdata303.df_apply(.data, .fun, .filter, ...)"},{"path":"/reference/newprojdata303.df_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function to rows in the data frame for which a condition is true — newprojdata303.df_apply","text":".data data frame. .fun function takes vector returns changes. .filter function takes vector returns bool letting df_apply know whether apply .fun","code":""},{"path":"/reference/newprojdata303.df_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function to rows in the data frame for which a condition is true — newprojdata303.df_apply","text":"new_df, updated data frame columns .filter returns true changed .fun","code":""},{"path":"/reference/newprojdata303.df_apply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function to rows in the data frame for which a condition is true — newprojdata303.df_apply","text":"","code":"df_apply(iris, round, is.numeric, digits = 4) #> Error in df_apply(iris, round, is.numeric, digits = 4): could not find function \"df_apply\" df_apply(simple_df, toupper, is.character) #> Error in df_apply(simple_df, toupper, is.character): could not find function \"df_apply\""},{"path":[]},{"path":"/reference/simple_df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Testing data for data 303 project — simple_df","text":"data frame 5 rows 5 columns X1 vector letters -E X2 words , cat, , , hat X3 Random numbers decimal format X4 Random integers X5 Names upper lower case letters simple_df   Simple data containing columns numeric character data use testing df_apply function.  datasets","code":""},{"path":[]},{"path":"/reference/simple_up.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Testing data for data 303 project — simple_up","text":"data frame 5 rows 5 columns X1 vector letters -E X2 words , CAT, , , HAT X3 Random numbers decimal format X4 Random integers X5 Names upper case letters simple_up   Simple data containing columns numeric character data use testing df_apply function, uppercase  datasets","code":""}]
